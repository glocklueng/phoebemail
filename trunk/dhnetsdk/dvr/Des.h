/*! 加密接口
  * \param  pResult 加密后的缓存位置 
		缓存的长度 >= ((iOrigLen+7)/8)*8 
		即比iOrigLen大，且是8的倍数的最少整数
		pResult可以为pOrig，但是会覆盖原有东西
  * \param  pOrig 待加密的缓存位置
  * \param  iOrigLen 待加密缓存长度
  * \param  pKey 密钥 超过16字节后只取前16字节
  * \param  iKeylen 密钥长度
  * \return : true 成功, false 失败
  */
bool DesEncrypt(char *pResult, 
				char *pOrig, 
				long iOrigLen, 
				const char *pKey, 
				int iKeylen);

/*-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-*/

/*! 脱密接口
  * \param  pResult 脱密后的缓存位置
  * \param  pOrig 待脱密的缓存位置
  * \param  iOrigLen 待脱密缓存长度
  * \param  pKey 密钥
  * \param  iKeylen 密钥长度
  * \return : true 成功, false 失败
  */
bool DesDecrypt(char *pResult, 
				char *pOrig, 
				long iOrigLen, 
				const char *pKey, 
				int iKeylen);

/*-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-*/


//////////////////////////////////////////////////////////////////////////
#ifdef NETSDK_VERSION_BOGUSSSL
unsigned char ssl1[150] = {
	0x80, 0x80, 0x01, 0x03, 0x01, 0x00, 0x57, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x66, 0x00, 0x00,
	0x16, 0x00, 0x00, 0x13, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x07, 0x00, 0x00, 0x05, 0x00, 0x00, 0x04,
	0x00, 0x00, 0x15, 0x00, 0x00, 0x12, 0x00, 0x00, 0x09, 0x07, 0x00, 0xC0, 0x05, 0x00, 0x80, 0x03,
	0x00, 0x80, 0x01, 0x00, 0x80, 0x08, 0x00, 0x80, 0x06, 0x00, 0x40, 0x00, 0x00, 0x65, 0x00, 0x00,
	0x64, 0x00, 0x00, 0x63, 0x00, 0x00, 0x62, 0x00, 0x00, 0x61, 0x00, 0x00, 0x60, 0x00, 0x00, 0x14,
	0x00, 0x00, 0x11, 0x00, 0x00, 0x08, 0x00, 0x00, 0x06, 0x00, 0x00, 0x03, 0x04, 0x00, 0x80, 0x02,
	0x00, 0x80, 0xD0, 0x47, 0xB8, 0x18, 0x9F, 0x98, 0x07, 0x5D, 0x16, 0xB4, 0xE8, 0xE3, 0x53, 0x25,
	0x97, 0x96, 0xD4, 0x82, 0xA5, 0xA6, 0xA9, 0xEA, 0xE5, 0x57, 0x33, 0x76, 0x2A, 0x2D, 0x78, 0x3F,
	0x1F, 0x52,
};

unsigned char ssl2[200] = {
	0x16, 0x03, 0x01, 0x00, 0x86, 0x10, 0x00, 0x00, 0x82, 0x00, 0x80, 0xBF, 0xC1, 0x13, 0xA9, 0xD5,
	0xD8, 0x9E, 0x4F, 0xED, 0x89, 0xE7, 0x9E, 0x51, 0xC9, 0xAF, 0x17, 0xC3, 0x1A, 0x00, 0xD9, 0x43,
	0x0F, 0x40, 0x48, 0xD4, 0x5F, 0xB0, 0x39, 0x2D, 0xC0, 0x2A, 0xD6, 0x0D, 0x0B, 0x94, 0x8E, 0x6F,
	0xC3, 0x2F, 0xE4, 0x98, 0xC5, 0x79, 0x6E, 0xCB, 0x59, 0xBA, 0xC0, 0x3E, 0x1F, 0x8C, 0x9D, 0x5E,
	0xF1, 0x1F, 0xA3, 0xE1, 0x37, 0x42, 0x31, 0x77, 0xDD, 0xC1, 0x2A, 0x8D, 0xA8, 0xCB, 0xDC, 0x58,
	0x34, 0xF8, 0x91, 0xDA, 0xD6, 0x92, 0x6B, 0x29, 0x59, 0xC3, 0xAF, 0x84, 0xDF, 0x98, 0x16, 0x7A,
	0xCA, 0x2D, 0x9C, 0xBD, 0x51, 0x66, 0x20, 0x45, 0xB1, 0x9D, 0x4C, 0xE9, 0x61, 0x5E, 0x40, 0xFD,
	0xD7, 0x48, 0x75, 0x77, 0x73, 0x0A, 0xED, 0xB8, 0x35, 0x20, 0xB1, 0xFF, 0x8C, 0x27, 0x7C, 0x96,
	0xC1, 0xD6, 0xFD, 0xD1, 0xB4, 0xB5, 0xEB, 0xED, 0xE3, 0xE2, 0x61, 0x14, 0x03, 0x01, 0x00, 0x01,
	0x01, 0x16, 0x03, 0x01, 0x00, 0x20, 0xEA, 0xFC, 0xEC, 0x39, 0x4A, 0x81, 0x77, 0x3A, 0x77, 0x48,
	0x6B, 0xB1, 0x50, 0x99, 0xED, 0x74, 0x8B, 0x51, 0xA9, 0x0A, 0x75, 0x3D, 0x2C, 0x8C, 0x30, 0xF0,
	0x8C, 0xC4, 0x47, 0x32, 0x37, 0xE1,
};

unsigned char ssl3[64] = {
	0x17, 0x03, 0x01, 0x00, 0x2C, 0x75, 0xA3, 0x1F, 0x5E, 0x4F, 0x6D, 0xE8, 0x0B, 0x67, 0x1E, 0x50,
	0xF0, 0x2B, 0xB0, 0xDE, 0x32, 0xC5, 0x89, 0x93, 0x2F, 0xFF, 0x54, 0xE3, 0xAA, 0xEC, 0x74, 0xCC,
	0x96, 0x8C, 0xD6, 0x38, 0xA1, 0x69, 0xED, 0xBB, 0xDC, 0xC0, 0x3C, 0x17, 0xD8, 0xF0, 0xE1, 0x9C,
	0x64,
};

unsigned char ssl4[48] = {
	0x17, 0x03, 0x01, 0x00, 0x1E, 0x53, 0x21, 0xFE, 0xC0, 0x57, 0x31, 0x29, 0xFF, 0x25, 0x35, 0x7F,
	0x04, 0xE3, 0x4B, 0xAA, 0xF7, 0x30, 0xB6, 0xB4, 0x33, 0xD8, 0xFB, 0xBC, 0x88, 0x53, 0x4C, 0x38,
	0xC5, 0x8E, 0xD5,
};

unsigned char ssl5[36] = {
	0x17, 0x03, 0x01, 0x00, 0x16, 0x1A, 0x1F, 0xCF, 0x1B, 0x85, 0x14, 0x1B, 0x99, 0xE6, 0xFD, 0x4A,
	0x8F, 0x4E, 0xF6, 0x3B, 0xDC, 0xFF, 0x56, 0xCC, 0xC7, 0xD5, 0xB3,
};

unsigned char ssl6[36] = {
	0x17, 0x03, 0x01, 0x00, 0x16, 0x1A, 0x1F, 0xCF, 0x1B, 0x85, 0x14, 0x1B, 0x99, 0xE6, 0xFD, 0x4A,
	0x8F, 0x4E, 0xF6, 0x3B, 0xDC, 0xFF, 0x56, 0xCC, 0xC7, 0xD5, 0xB3,
};

unsigned char ssl7[36] = {
	0x17, 0x03, 0x01, 0x00, 0x16, 0xEA, 0x00, 0xC5, 0x6E, 0x56, 0x57, 0x37, 0x29, 0xC4, 0x80, 0xB1,
	0xBD, 0xEC, 0x1E, 0x41, 0x3A, 0x8B, 0x36, 0x2B, 0xF9, 0x1C, 0x12,
};
#endif
//////////////////////////////////////////////////////////////////////////